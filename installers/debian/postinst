#!/bin/bash

set -e

. /usr/share/debconf/confmodule
db_version 2.0

red='\e[0;31m'
endColor='\e[0m'
failed=false
if db_go; then
    echo "# Generated from debconf - do not edit by hand, to change configuration options run: poseidon configure" > /etc/poseidon/default.conf
    { echo "#"; echo "#"; echo ""; } >> /etc/poseidon/default.conf

    # read from db to set variables in default.conf
    db_get poseidon/controller_type
    if [[ ! -z "$RET" ]]; then
        if [ "$RET" == "Faucet" ]; then
            echo "controller_type=faucet" >> /etc/poseidon/default.conf
            db_get poseidon/faucet_same_host
            if [ "$RET" == "No" ]; then
                db_get poseidon/faucet_controller_uri
                if [[ ! -z "$RET" ]]; then
                    echo "controller_uri=$RET" >> /etc/poseidon/default.conf
                else
                    echo >&2 -e "${red}You need to specify the IP or hostname of the Faucet controller.${endColor}"
                    db_unregister poseidon/faucet_controller_uri
                    failed=true
                fi
                db_get poseidon/faucet_controller_user
                if [[ ! -z "$RET" ]]; then
                    echo "controller_user=$RET" >> /etc/poseidon/default.conf
                else
                    echo >&2 -e "${red}You need to specify the username to SSH to the Faucet controller.${endColor}"
                    db_unregister poseidon/faucet_controller_user
                    failed=true
                fi
                db_get poseidon/faucet_controller_pass
                if [[ ! -z "$RET" ]]; then
                    echo "controller_pass=$RET" >> /etc/poseidon/default.conf
                else
                    echo >&2 -e "${red}You need to specify the password to SSH to the Faucet controller.${endColor}"
                    db_unregister poseidon/faucet_controller_pass
                    failed=true
                fi
            elif [ "$RET" == "Yes" ]; then
                echo "controller_uri=" >> /etc/poseidon/default.conf
            fi
            db_get poseidon/faucet_controller_mirror_ports
            if [[ ! -z "$RET" ]]; then
                echo "controller_mirror_ports=$RET" >> /etc/poseidon/default.conf
            else
                echo >&2 -e "${red}You need to specify at least one mirror port.${endColor}"
                db_unregister poseidon/faucet_controller_mirror_ports
                failed=true
            fi
            db_get poseidon/faucet_fa_rabbit_enabled
            if [[ ! -z "$RET" ]]; then
                if [ "$RET" == "Yes" ]; then
                    echo "FA_RABBIT_ENABLED=True" >> /etc/poseidon/default.conf
                    db_get poseidon/faucet_fa_rabbit_host
                    if [[ ! -z "$RET" ]]; then
                        echo "FA_RABBIT_HOST=$RET" >> /etc/poseidon/default.conf
                    fi
                    db_get poseidon/faucet_fa_rabbit_port
                    if [[ ! -z "$RET" ]]; then
                        echo "FA_RABBIT_PORT=$RET" >> /etc/poseidon/default.conf
                    fi
                    db_get poseidon/faucet_fa_rabbit_exchange
                    if [[ ! -z "$RET" ]]; then
                        echo "FA_RABBIT_EXCHANGE=$RET" >> /etc/poseidon/default.conf
                    fi
                    db_get poseidon/faucet_fa_rabbit_exchange_type
                    if [[ ! -z "$RET" ]]; then
                        echo "FA_RABBIT_EXCHANGE_TYPE=$RET" >> /etc/poseidon/default.conf
                    fi
                    db_get poseidon/faucet_fa_rabbit_routing_key
                    if [[ ! -z "$RET" ]]; then
                        echo "FA_RABBIT_ROUTING_KEY=$RET" >> /etc/poseidon/default.conf
                    fi
                else
                    echo "FA_RABBIT_ENABLED=False" >> /etc/poseidon/default.conf
                fi
            fi
        elif [ "$RET" == "BigSwitch Cloud Fabric" ]; then
            echo "controller_type=bcf" >> /etc/poseidon/default.conf
            db_get poseidon/bcf_controller_uri
            if [[ ! -z "$RET" ]]; then
                echo "controller_uri=https://$RET/api/v1/" >> /etc/poseidon/default.conf
            else
                echo >&2 -e "${red}You need to specify the IP or hostname of the BigSwitch Cloud Fabric controller.${endColor}"
                db_unregister poseidon/bcf_controller_uri
                failed=true
            fi
            db_get poseidon/bcf_controller_user
            if [[ ! -z "$RET" ]]; then
                echo "controller_user=$RET" >> /etc/poseidon/default.conf
            else
                echo >&2 -e "${red}You need to specify the username to connect to the BigSwitch Cloud Fabric controller.${endColor}"
                db_unregister poseidon/bcf_controller_user
                failed=true
            fi
            db_get poseidon/bcf_controller_pass
            if [[ ! -z "$RET" ]]; then
                echo "controller_pass=$RET" >> /etc/poseidon/default.conf
            else
                echo >&2 -e "${red}You need to specify the password to connect to the BigSwitch Cloud Fabric controller.${endColor}"
                db_unregister poseidon/bcf_controller_pass
                failed=true
            fi
            db_get poseidon/bcf_controller_interface_group
            if [[ ! -z "$RET" ]]; then
                echo "controller_interface_group=$RET" >> /etc/poseidon/default.conf
            fi
            db_get poseidon/bcf_controller_span_fabric_name
            if [[ ! -z "$RET" ]]; then
                echo "controller_span_fabric_name=$RET" >> /etc/poseidon/default.conf
            fi
        fi
    else
        echo >&2 -e "${red}You need to specify the controller type.${endColor}"
        db_unregister poseidon/controller_type
        failed=true
    fi

    db_get poseidon/controller_type
    if [[ ! -z "$RET" ]]; then
        if [ "$RET" != "Demo" ]; then
            db_get poseidon/collector_nic
            if [[ ! -z "$RET" ]]; then
                if [ "$RET" == "Specify your own" ]; then
                    db_get poseidon/specify_nic
                    if [[ ! -z "$RET" ]]; then
                        echo "collector_nic=$RET" >> /etc/poseidon/default.conf
                    else
                        echo >&2 -e "${red}You need to specify a collector NIC.${endColor}"
                        db_unregister poseidon/collector_nic
                        db_unregister poseidon/specify_nic
                        failed=true
                    fi
                else
                    db_get poseidon/available_nics
                    if [[ ! -z "$RET" ]]; then
                        echo "collector_nic=$RET" >> /etc/poseidon/default.conf
                    else
                        echo >&2 -e "${red}You need to specify a collector NIC.${endColor}"
                        db_unregister poseidon/collector_nic
                        db_unregister poseidon/available_nics
                        failed=true
                    fi
                fi
            else
                echo >&2 -e "${red}You need to specify the collector NIC.${endColor}"
                db_unregister poseidon/collector_nic
                failed=true
            fi

            db_get poseidon/max_concurrent_reinvestigations
            if [[ ! -z "$RET" ]]; then
                echo "max_concurrent_reinvestigations=$RET" >> /etc/poseidon/default.conf
            fi

            db_get poseidon/learn_public_addresses
            if [[ ! -z "$RET" ]]; then
                echo "learn_public_addresses=$RET" >> /etc/poseidon/default.conf
            fi

            db_get poseidon/logging_level
            if [[ ! -z "$RET" ]]; then
                echo "logger_level=$RET" >> /etc/poseidon/default.conf
            fi

        fi
    fi
    if [ "$failed" == true ]; then
        exit 1
    fi

    docker load -i /opt/poseidon/dist/cyberreboot-vent.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-file-drop.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-network-tap.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-rabbitmq.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-redis.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-rq-dashboard.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-rq-worker.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-syslog.tar
    docker load -i /opt/poseidon/dist/cyberreboot-poseidon-api.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-plugins-pcap-to-node-pcap.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-plugins-p0f.tar
    docker load -i /opt/poseidon/dist/cyberreboot-vent-plugins-tcprewrite-dot1q.tar
    docker load -i /opt/poseidon/dist/cyberreboot-crviz.tar
    docker load -i /opt/poseidon/dist/cyberreboot-poseidonml.tar

    # start poseidon service
    systemctl stop poseidon || true
    systemctl enable poseidon
    systemctl start poseidon

    db_get poseidon/controller_type
    if [[ ! -z "$RET" ]]; then
        if [ "$RET" == "Demo" ]; then
            default_iface=$(awk '$2 == 00000000 { print $1 }' /proc/net/route)
            default_ip=$(ip addr show dev "$default_iface" | awk '$1 ~ /^inet/ { sub("/.*", "", $2); print $2 }' | head -1)

            # settings in /etc/poseidon/default.conf
            echo "controller_type=faucet" >> /etc/poseidon/default.conf
            echo "controller_uri=" >> /etc/poseidon/default.conf
            echo "controller_mirror_ports='{\"switch-1\":3}'" >> /etc/poseidon/default.conf
            echo "collector_nic=s1-eth3" >> /etc/poseidon/default.conf

            # settings for Faucet
            mkdir -p /etc/faucet
            mkdir -p /var/log/faucet
            touch /var/log/faucet/faucet.log
            touch /var/log/faucet/faucet_exception.log
            echo "dps:" > /etc/faucet/faucet.yaml
            echo "  switch-1:" >> /etc/faucet/faucet.yaml
            echo "    dp_id: 1" >> /etc/faucet/faucet.yaml
            echo "    hardware: Open vSwitch" >> /etc/faucet/faucet.yaml
            echo "    interfaces:" >> /etc/faucet/faucet.yaml
            echo "      1:" >> /etc/faucet/faucet.yaml
            echo "        native_vlan: 8" >> /etc/faucet/faucet.yaml
            echo "      2:" >> /etc/faucet/faucet.yaml
            echo "        native_vlan: 8" >> /etc/faucet/faucet.yaml
            echo "      3:" >> /etc/faucet/faucet.yaml
            echo "        description: mirror" >> /etc/faucet/faucet.yaml
            echo "        output_only: true" >> /etc/faucet/faucet.yaml
            echo "vlans:" >> /etc/faucet/faucet.yaml
            echo "  8:" >> /etc/faucet/faucet.yaml

            command -v python >/dev/null 2>&1 || { echo >&2 -e "${red}Python not installed, please install it first: sudo apt-get install python${endColor}"; db_unregister poseidon/controller_type; exit 1; }
            command -v mn >/dev/null 2>&1 || { echo >&2 -e "${red}Mininet not installed, please install it first: sudo apt-get install mininet${endColor}"; db_unregister poseidon/controller_type; exit 1; }
            command -v docker-compose >/dev/null 2>&1 || { sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-"$(uname -s)"-"$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose; }
            pushd /tmp; (git clone https://github.com/faucetsdn/faucet || true); popd
            pushd /tmp/faucet && FAUCET_CONFIG_STAT_RELOAD=1 FAUCET_EVENT_SOCK=1 FA_RABBIT_HOST=$default_ip docker-compose -f docker-compose.yaml -f adapters/vendors/rabbitmq/docker-compose.yaml up --build -d && popd
            db_purge
            less /opt/poseidon/docs/demo.txt
            echo ""
            echo "To get the instructions again:"
            echo ""
            echo "less /opt/poseidon/docs/demo.txt"
            echo ""
            echo ""
        fi
    fi
    exit 0
else
    exit 1
fi

